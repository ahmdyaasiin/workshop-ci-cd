// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/contract/product.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dto "github.com/ahmdyaasiin/workshop-ci-cd/internal/domain/dto"
	entity "github.com/ahmdyaasiin/workshop-ci-cd/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockIUProduct is a mock of IUProduct interface.
type MockIUProduct struct {
	ctrl     *gomock.Controller
	recorder *MockIUProductMockRecorder
}

// MockIUProductMockRecorder is the mock recorder for MockIUProduct.
type MockIUProductMockRecorder struct {
	mock *MockIUProduct
}

// NewMockIUProduct creates a new mock instance.
func NewMockIUProduct(ctrl *gomock.Controller) *MockIUProduct {
	mock := &MockIUProduct{ctrl: ctrl}
	mock.recorder = &MockIUProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUProduct) EXPECT() *MockIUProductMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockIUProduct) All(ctx context.Context, keyword string) ([]dto.ResponseGetProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, keyword)
	ret0, _ := ret[0].([]dto.ResponseGetProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockIUProductMockRecorder) All(ctx, keyword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockIUProduct)(nil).All), ctx, keyword)
}

// Get mocks base method.
func (m *MockIUProduct) Get(ctx context.Context, id string) (dto.ResponseGetProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(dto.ResponseGetProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIUProductMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIUProduct)(nil).Get), ctx, id)
}

// MockIRProduct is a mock of IRProduct interface.
type MockIRProduct struct {
	ctrl     *gomock.Controller
	recorder *MockIRProductMockRecorder
}

// MockIRProductMockRecorder is the mock recorder for MockIRProduct.
type MockIRProductMockRecorder struct {
	mock *MockIRProduct
}

// NewMockIRProduct creates a new mock instance.
func NewMockIRProduct(ctrl *gomock.Controller) *MockIRProduct {
	mock := &MockIRProduct{ctrl: ctrl}
	mock.recorder = &MockIRProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRProduct) EXPECT() *MockIRProductMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockIRProduct) All(ctx context.Context, keyword string) ([]entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, keyword)
	ret0, _ := ret[0].([]entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockIRProductMockRecorder) All(ctx, keyword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockIRProduct)(nil).All), ctx, keyword)
}

// Get mocks base method.
func (m *MockIRProduct) Get(ctx context.Context, id string) (entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIRProductMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIRProduct)(nil).Get), ctx, id)
}
